//
//  SearchBarComponent.swift
//  Memorable
//
//  Created by Minhyeok Kim on 6/25/24.
//

import UIKit
import SnapKit

class SearchComponent: UIView {
    
    private let searchBar = UISearchBar()
    private let searchButton = UIButton()
    private let searchMenu = UIView() // 검색 메뉴를 위한 컨테이너 뷰
    
    private var isExpanded = false
    private var searchTrailing: CGFloat = -124
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        setupViews()
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    private func setupViews() {
        // Search Button
        addSubview(searchButton)
        searchButton.snp.makeConstraints { make in
            make.trailing.equalToSuperview().offset(searchTrailing)
            make.centerY.equalToSuperview()
            make.width.height.equalTo(44)
        }
        if let searchImage = UIImage(named: "btnSearch")?.resized(to: CGSize(width: 24, height: 24)) {
            searchButton.setImage(searchImage, for: .normal)
        }
        searchButton.imageView?.contentMode = .center
        searchButton.backgroundColor = .black
        searchButton.layer.cornerRadius = 22
        searchButton.addTarget(self, action: #selector(searchButtonTapped), for: .touchUpInside)
        
        // Search Bar
        addSubview(searchBar)
        searchBar.snp.makeConstraints { make in
            make.trailing.equalTo(searchButton.snp.leading).offset(-12)
            make.centerY.equalTo(searchButton.snp.centerY)
            make.height.equalTo(44)
            make.width.equalTo(0)
        }
        searchBar.alpha = 0
        setupSearchBarStyle()
        
        // Search Menu
        addSubview(searchMenu)
        searchMenu.snp.makeConstraints { make in
            make.top.equalTo(searchBar.snp.bottom).offset(8)
            make.leading.trailing.equalTo(searchBar)
            make.height.equalTo(0)
        }
        searchMenu.backgroundColor = .lightGray
        searchMenu.alpha = 0
    }
    
    private func setupSearchBarStyle() {
        searchBar.barTintColor = .black
        searchBar.backgroundImage = UIImage()
        if let textField = searchBar.value(forKey: "searchField") as? UITextField {
            textField.backgroundColor = .black
            textField.textColor = .white
            textField.layer.cornerRadius = 22
            textField.clipsToBounds = true
            textField.font = UIFont.systemFont(ofSize: 16)
            textField.leftView = UIView(frame: CGRect(x: 0, y: 0, width: 10, height: textField.frame.height))
            textField.leftViewMode = .always
        }
    }
    
    @objc private func searchButtonTapped() {
        isExpanded.toggle()
        
        let animationDuration: TimeInterval = 0.5
        let movementDistance: CGFloat = 88.0
        
        let targetSearchTrailing = isExpanded
            ? searchTrailing + movementDistance
            : searchTrailing - movementDistance
        
        UIView.animate(withDuration: animationDuration) {
            self.searchTrailing = targetSearchTrailing
            
            self.searchButton.snp.updateConstraints { make in
                make.trailing.equalToSuperview().offset(self.searchTrailing)
            }
            
            self.layoutIfNeeded()
        } completion: { _ in
            if self.isExpanded {
                self.animateSearchBar()
            } else {
                self.hideSearchBar()
            }
        }
    }
    
    private func animateSearchBar() {
        searchBar.alpha = 1
        UIView.animate(withDuration: 0.5, delay: 0, usingSpringWithDamping: 0.7, initialSpringVelocity: 0.1, options: .curveEaseInOut) {
            self.searchBar.snp.updateConstraints { make in
                make.width.equalTo(850)
            }
            self.layoutIfNeeded()
        } completion: { _ in
            self.animateSearchMenu()
        }
    }
    
    private func hideSearchBar() {
        UIView.animate(withDuration: 0.5, delay: 0, usingSpringWithDamping: 0.7, initialSpringVelocity: 0.1, options: .curveEaseInOut) {
            self.searchBar.snp.updateConstraints { make in
                make.width.equalTo(0)
            }
            self.searchMenu.snp.updateConstraints { make in
                make.height.equalTo(0)
            }
            self.searchMenu.alpha = 0
            self.layoutIfNeeded()
        } completion: { _ in
            self.searchBar.alpha = 0
        }
    }
    
    private func animateSearchMenu() {
        UIView.animate(withDuration: 0.3) {
            self.searchMenu.snp.updateConstraints { make in
                make.height.equalTo(200) // 원하는 메뉴 높이로 조정
            }
            self.searchMenu.alpha = 1
            self.layoutIfNeeded()
        }
    }
}
